#!/usr/bin/env node

require('es6-shim');
var path = require('path');
var chalk = require('chalk');
var level = require('level');
var levelgraph = require('levelgraph');
var sublevel = require('level-sublevel');
var async = require('async');
var utils = require('./life-utils');

var path = utils.home();
var db = sublevel(level(path));
var entries = db.sublevel('entries', { valueEncoding: 'json' });
var log = db.sublevel('log');
var meta = db.sublevel('meta');
var graph = levelgraph(db.sublevel('graph'));

/**
 * Process any args as a new entry
 */
var words = process.argv.slice(2).join(' ');
var entry = words.split(' ').reduce(function (memo, arg, index, args) {
    if (arg && arg.startsWith('@')) {
        var value = args[index + 1];
        if (value) {
            args[index + 1] = null;
        }
        memo.data.push({
            key: arg.slice(1),
            value: value
        });
    } else {
        if (arg && arg.startsWith('+')) {
            var match = arg.match(utils.tagRegex);
            memo.tags.add(match[1].toLowerCase());
        }
        if (arg) {
            memo.annotation = (memo.annotation + ' ' + arg).trim();
        }
    }
    return memo;
}, { data: [], tags: new Set(), annotation: '' });

entry.tags = utils.getIterableElements(entry.tags);

/**
 * Note to self
 *
 * Queries:
 *     - entries between x & y
 *     - entries with tag
 *     - entries with key
 *     - entry with id
 *
 * Graph:
 *     timestamp -> tagged -> tag
 *     timestamp -> has -> key
 *
 * Entries:
 *     a~timestamp -> entry
 *
 * Log:
 *     k~key~timestamp -> value
 *     t~tag~timestamp -> entry
 *     i~id -> timestamp
 *
 * Meta:
 *     id -> last id
 *
 */

// We got a new entry, add it
if (entry.annotation) {
    return meta.get('id', function (err, id) {
        if (err) {
            if (err.notFound) {
                id = 0;
            } else {
                throw err;
            }
        }

        var timestamp = Date.now();
        id = parseInt(id, 10) + 1;

        entry.id = id;
        entry.timestamp = timestamp;

        var entryOps = [{ key: utils.key('a', timestamp), value: entry, type: 'put' }];
        var logOps = [{ key: utils.key('i', id), value: timestamp, type: 'put' }];
        var graphOps = [];

        entry.tags.forEach(function (tag) {
            logOps.push({ key: utils.key('t', tag, timestamp), value: entry, type: 'put' })
            graphOps.push({ subject: timestamp, predicate: 'tagged', object: tag });
        });
        entry.data.forEach(function (datum) {
            logOps.push({ key: utils.key('k', datum.key, timestamp), value: datum.value, type: 'put' })
            graphOps.push({ subject: timestamp, predicate: 'has', object: datum.key });
        });

        async.parallel([
            entries.batch.bind(entries, entryOps),
            log.batch.bind(log, logOps),
            graph.put.bind(graph, graphOps),
            meta.put.bind(meta, 'id', id)
        ], function (err) {
            if (err) throw err;
            utils.logEntry(entry, chalk.green('+'));
        });
    });
}

// No entry, read out the last 24 hrs
entries
    .createReadStream({
        start: utils.key('a', Date.now() - (1000 * 60 * 60 * 24)),
        end: utils.key('a', '~')
    })
    .on('data', function (data) {
        utils.logEntry(data.value);
    });
